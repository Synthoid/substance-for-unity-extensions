using UnityEngine;
using UnityEngine.Playables;
using UnityEngine.Timeline;
using SOS.SubstanceExtensions;

namespace SOS.SubstanceExtensions.Timeline
{
    /// <summary>
    /// Base class for timeline clip classes that set substance native graph input values.
    /// </summary>
    [System.Serializable]
    public abstract class SetSubstanceInputValueAsset : PlayableAsset, ITimelineClipAsset
    {
        protected const string kClipNameFormat = "{0} - {1}";

        public ClipCaps clipCaps
        {
            get { return ClipCaps.Blending; }
        }

        public abstract ISubstanceInputParameter TargetInputParameter { get; }

        public abstract string GetClipName();
    }

    /// <summary>
    /// Base class for timeline clip classes that set substance native graph input values.
    /// </summary>
    /// <typeparam name="T">Type for the set input behaviour generated by the clip.</typeparam>
    [System.Serializable]
    public abstract class SetSubstanceInputValueAsset<T> : SetSubstanceInputValueAsset where T : SetSubstanceInputValueBehaviour, new()
    {
        [SerializeField]
        protected T template = new T();

        public override ISubstanceInputParameter TargetInputParameter
        {
            get { return template.Parameter; }
        }

        /// <summary>
        /// Template used for behaviour generation.
        /// </summary>
        public T Template
        {
            get { return template; }
        }

        public override Playable CreatePlayable(PlayableGraph graph, GameObject go)
        {
            return ScriptPlayable<T>.Create(graph, template);
        }


        public override string GetClipName()
        {
            return string.Format(kClipNameFormat, string.IsNullOrEmpty(template.Parameter.Name) ? "<None>" : template.Parameter.Name, template.ValueRaw.ToString());
        }
    }
}